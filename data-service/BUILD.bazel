load("@npm//:defs.bzl", "npm_link_all_packages")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@aspect_rules_js//js:defs.bzl", "js_binary", "js_image_layer")
load("@io_bazel_rules_docker//container:container.bzl", "container_image", "container_push")
load("@io_bazel_rules_docker//container:layer.bzl", "container_layer")
load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
load("@io_bazel_rules_docker//go:image.bzl", "go_image")

npm_link_all_packages(
    name = "node_modules",
)

ts_project(
    name = "ts",
    srcs = glob(["src/**/*.ts"]),
    declaration = True,
    out_dir = ".",
    deps = [
        ":node_modules",
    ],
)

js_binary(
    name = "data-service",
    data = [":ts"],
    entry_point = "src/data-service.js",
)

js_image_layer(
    name = "layers",
    binary = ":data-service",
    root = "/app",
    visibility = ["//visibility:__pkg__"],
)

filegroup(
    name = "app_tar",
    srcs = [":layers"],
    output_group = "app",
)

container_layer(
    name = "app_layer",
    tars = [":app_tar"],
)

filegroup(
    name = "node_modules_tar",
    srcs = [":layers"],
    output_group = "node_modules",
)

container_layer(
    name = "node_modules_layer",
    tars = [":node_modules_tar"],
)

container_image(
    name = "image",
    architecture = "amd64",
    base = "@debian_amd64//image",
    cmd = ["/app/data-service/data-service"],
    entrypoint = ["bash"],
    layers = [
        ":app_layer",
        ":node_modules_layer",
    ],
)

# JS image push
# container_push(
#     name = "image_push",
#     format = "Docker",
#     image = ":image",
#     registry = "ghcr.io",
#     repository = "andrew-delph/video-call-data-service",
#     tag = "latest",
# )

go_binary(
    name = "server",
    embed = [":go_default_library"],
    goarch = "amd64",
    goos = "linux",
    visibility = ["//visibility:public"],
)

go_image(
    name = "go_image",
    embed = [":go_default_library"],
    goarch = "amd64",
    goos = "linux",
    importpath = "main",
    visibility = ["//visibility:private"],
)

container_image(
    name = "greeter_server_image",
    base = ":go_image",
    ports = ["80"],
    # repository = "docker.io/salrashid123"
    # repository = "gcr.io/$PROJECT_ID"
    # repository = "us-central1-docker.pkg.dev/builder-project/repo1/greeter_server",
)

container_push(
    name = "image_push",
    format = "Docker",
    image = ":greeter_server_image",
    registry = "ghcr.io",
    repository = "andrew-delph/video-call-data-service",
    tag = "latest",
)

go_library(
    name = "go_default_library_deps",
    importpath = "github.com/andrew-delph/cloud-video-call/data-service",
    visibility = ["//visibility:private"],
    deps = [
        "//common-messaging/proto:go_default_library",
        "@com_github_neo4j_neo4j_go_driver_v5//neo4j:go_default_library",
        "@org_golang_google_grpc//:go_default_library",
    ],
)

go_library(
    name = "go_default_library",
    srcs = [
        "helpers.go",
        "main.go",
    ],
    importpath = "github.com/andrew-delph/cloud-video-call/data-service",
    visibility = ["//visibility:private"],
    deps = [
        "//common-messaging/proto:go_default_library",
        "@com_github_neo4j_neo4j_go_driver_v5//neo4j:go_default_library",
        "@com_github_sirupsen_logrus//:go_default_library",
        "@org_golang_google_grpc//:go_default_library",
    ],
)
